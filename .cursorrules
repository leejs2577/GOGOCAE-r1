# GOGOCAE_R1 프로젝트 Cursor Rules

## 프로젝트 개요
GOGOCAE_R1은 CAE 해석 업무를 통합 관리하는 클라우드 기반 SaaS 웹 서비스입니다. 설계자와 해석자가 해석 요청·진행·보고를 한 곳에서 관리할 수 있는 협업 플랫폼입니다.

## 기술 스택
- **Frontend**: Next.js 15.1.0 (App Router), React 19, TypeScript
- **Backend**: Next.js API Routes (Serverless)
- **Database**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Storage**: Supabase Storage
- **Deployment**: Vercel
- **Styling**: Tailwind CSS, shadcn/ui
- **State Management**: Zustand, React Query
- **Form Management**: React Hook Form + Zod
- **Icons**: Lucide React
- **Calendar**: React Big Calendar
- **Drag & Drop**: @hello-pangea/dnd

## 프로젝트 구조 (도메인 주도 설계)
```
src/
├── app/                     # Next.js App Router
│   ├── (auth)/             # 인증 페이지 그룹
│   ├── (main)/             # 메인 앱 페이지 그룹
│   ├── api/                # API Routes
│   └── globals.css         # 전역 스타일
├── components/             # 공통 UI 컴포넌트
│   ├── ui/                 # shadcn/ui 컴포넌트
│   ├── layout/             # 레이아웃 컴포넌트
│   ├── auth/               # 인증 관련 컴포넌트
│   ├── calendar/           # 캘린더 컴포넌트
│   ├── kanban/             # 칸반 보드 컴포넌트
│   ├── file-upload/        # 파일 업로드 컴포넌트
│   ├── notification/       # 알림 컴포넌트
│   └── report-upload/      # 보고서 업로드 컴포넌트
├── domains/                # 비즈니스 도메인별 로직
│   ├── auth/               # 인증 도메인
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── services/
│   │   ├── types.ts
│   │   └── constants.ts
│   └── request/            # 요청 도메인
│       ├── components/
│       ├── hooks/
│       ├── services/
│       └── types.ts
├── lib/                    # 유틸리티 및 설정
│   ├── supabase/           # Supabase 클라이언트 설정
│   ├── utils.ts            # 공통 유틸리티
│   └── file-upload.ts      # 파일 업로드 유틸리티
└── hooks/                  # 전역 커스텀 훅
    ├── use-toast.ts
    └── useUserRole.ts
```

## 코딩 규칙 및 가이드라인

### 1. 필수 사항 (MUST)
- **모든 컴포넌트는 클라이언트 컴포넌트로 작성** (`'use client'` 지시어 사용)
- **page.tsx의 params props는 Promise 타입 사용**
- **placeholder 이미지는 picsum.photos 사용**
- **도메인 주도 설계 구조 준수** - 비즈니스 로직을 도메인별로 분리
- **타입 안전성** - TypeScript strict 모드, `any` 타입 사용 금지
- **서버 사이드 로직 우선** - 복잡한 비즈니스 로직은 API Routes에서 처리

### 2. 네이밍 규칙
- **컴포넌트**: PascalCase (예: `RequestForm`, `UserProfile`)
- **변수/함수**: camelCase (예: `currentUser`, `getRequestById`)
- **커스텀 훅**: `use` 접두사 (예: `useUserData`)
- **상수**: UPPER_SNAKE_CASE (예: `REQUEST_STATUS_LABELS`)

### 3. 컴포넌트 작성 규칙
- **화살표 함수 사용** (일관성을 위해)
- **명시적 타입 정의** - 모든 함수 매개변수와 반환값에 타입 지정
- **인터페이스 사용** - 객체 형태는 `interface`로 정의
- **Named Export 사용** - default export는 Next.js 페이지, 레이아웃, API 핸들러에만 사용

### 4. 파일 구조 및 Import 순서
```typescript
// 1. React 및 Next.js imports
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

// 2. 외부 라이브러리 imports
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';

// 3. 내부 절대 경로 imports
import { Button } from '@/components/ui/button';
import { useCreateRequest } from '@/domains/request/hooks/useCreateRequest';

// 4. 상대 경로 imports
import { FormInput } from './FormInput';
```

### 5. 에러 처리 패턴
```typescript
// API Routes 에러 처리
export async function POST(request: Request) {
  try {
    // 비즈니스 로직
    return NextResponse.json({ data: result }, { status: 201 });
  } catch (error) {
    console.error('API Error:', error);
    return NextResponse.json(
      { error: { message: 'An internal server error occurred.' } },
      { status: 500 }
    );
  }
}

// 커스텀 훅 에러 상태 노출
function useRequests() {
  const [data, setData] = useState(null);
  const [error, setError] = useState<Error | null>(null);
  // ...
  return { data, error, isLoading };
}
```

### 6. 상태 관리
- **로컬 상태**: `useState` 사용
- **공유 상태**: `useContext` + `useReducer` 조합
- **전역 상태**: Zustand 사용 (필요시)
- **서버 상태**: React Query 사용

### 7. 데이터 플로우
1. UI 컴포넌트 → 커스텀 훅 함수 호출
2. 커스텀 훅 → 서비스 함수 실행
3. 서비스 함수 → Next.js API Route 호출 (fetch)
4. API Route → Supabase 클라이언트로 비즈니스 로직 처리
5. Supabase → 데이터베이스/스토리지 작업 수행

### 8. 환경 변수
- **클라이언트**: `NEXT_PUBLIC_` 접두사 필수
- **서버**: 접두사 없이 사용

### 9. 금지 사항
- `any` 타입 사용 금지
- default export 사용 금지 (페이지, 레이아웃, API 핸들러 제외)
- 200줄 이상의 단일 컴포넌트 파일 금지
- 매직 스트링/넘버 사용 금지 (상수로 정의)

### 10. UI/UX 가이드라인
- **디자인 시스템**: shadcn/ui 컴포넌트 사용
- **색상 팔레트**: 
  - Primary: #1846FF (Royal Blue)
  - Secondary: #0B1F4B (Deep Navy)
  - Accent: #20C997 (Teal)
  - Background: #F5F7FA (Light Gray)
- **타이포그래피**: Inter 폰트 사용
- **반응형**: Mobile-first 접근법
- **접근성**: WCAG AA 기준 준수

### 11. 성능 최적화
- **이미지**: Next.js Image 컴포넌트 사용
- **코드 분할**: 페이지별 자동 분할
- **CDN**: Vercel Edge Network 활용
- **데이터베이스**: 인덱스 활용 및 필요한 데이터만 SELECT

### 12. 보안
- **인증**: Supabase Auth 사용
- **권한 관리**: 역할 기반 접근 제어 (RBAC)
- **파일 업로드**: 서명된 URL 사용
- **통신**: HTTPS 전용

### 13. 테스트 및 품질
- **타입 체크**: TypeScript strict 모드
- **린팅**: ESLint 설정 준수
- **코드 리뷰**: PR 기반 개발 프로세스

### 14. 배포 및 운영
- **배포**: Vercel 자동 배포
- **환경**: Development, Staging, Production 분리
- **모니터링**: Vercel Analytics, Supabase Logs 활용

### 15. 데이터베이스 스키마
- **사용자**: roles 테이블 (designer, analyst, admin)
- **요청**: requests 테이블 (상태: pending, assigned, in_progress, completed, cancelled)
- **파일**: request_files 테이블 (request, report 카테고리)
- **알림**: notifications 테이블

### 16. API 설계
- **RESTful**: 리소스 기반 URL 구조
- **HTTP 메서드**: GET, POST, PUT/PATCH, DELETE 적절히 사용
- **응답 구조**: 일관된 JSON 형태
```json
// 성공 응답
{ "data": { "id": "123", "title": "Request Title" } }
// 에러 응답
{ "error": { "message": "Error description" } }
```

### 17. 파일 관리
- **업로드**: 드래그 앤 드롭 + 클릭 업로드 지원
- **파일 크기**: 최대 50MB (Supabase 제한)
- **허용 형식**: STEP, IGES, PDF, Office 문서, 이미지
- **카테고리**: request (모델), report (보고서)

### 18. 알림 시스템
- **실시간**: Supabase Realtime 활용
- **타입**: 요청 생성, 담당자 지정, 상태 변경, 완료
- **UI**: 우상단 토스트 메시지

이 규칙들을 준수하여 일관되고 유지보수가 용이한 코드를 작성하세요. 프로젝트의 성공적인 완성을 위해 모든 팀원이 이 가이드라인을 따르는 것이 중요합니다.

